<?xml version="1.0" encoding="UTF-8"?>
<web-app
  version="2.4"
  xmlns="http://java.sun.com/xml/ns/j2ee"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee 
	http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">

  <display-name>Screensaver 1.x</display-name>

  <description>ICCB-L Screensaver 1.x</description>

  <welcome-file-list>
    <welcome-file>index.jsp</welcome-file>
  </welcome-file-list>

  <!-- Configure a handler for exceptions thrown during server-side processing -->
  <!-- For now, we're handling all exceptions ourselves in ScreensaverSessionManagementFilter, and not allowing them propagate to the Servlet container -->
  <!-- error-page>
    <error-code>500</error-code>
    <location>/reportException.jsf</location>
  </error-page-->

  <!-- Configure a handler for unauthorized access -->
  <!-- error-page>
    <error-code>403</error-code>
    <location>/unauthorizedAccess.jsp</location>
  </error-page-->

  <!-- Spring initialization -->

  <!-- Specify Spring context configuration files, possibly one per application tier. -->
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>classpath*:spring-context.xml</param-value>
  </context-param>

  <!-- Use a servlet listener to allow us to load the above Spring application context XML files -->
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>


  <!--  JSF/MyFaces configuration (by MyEclipse) -->

  <servlet>
    <servlet-name>Faces Servlet</servlet-name>
    <servlet-class>javax.faces.webapp.FacesServlet</servlet-class>
    <load-on-startup>1</load-on-startup>
  </servlet>

  <servlet-mapping>
    <servlet-name>Faces Servlet</servlet-name>
    <!-- the types of URLs to handle as JSF pages -->
    <url-pattern>*.jsf</url-pattern>
  </servlet-mapping>

  <!-- MyFaces initialization is performed by this servlet context listener -->
  <listener>
    <listener-class>org.apache.myfaces.webapp.StartupServletContextListener</listener-class>
  </listener>

  <context-param>
    <description>
      Comma separated list of URIs of (additional) faces config files. (e.g. /WEB-INF/my-config.xml)
      See JSF 1.0 PRD2, 10.3.2 Attention: You should not put /WEB-INF/faces-config.xml in here.
      Doing so will force any JSF implementation to load the configuration twice, therefore
      registering each phase listener twice.
    </description>
    <param-name>javax.faces.CONFIG_FILES</param-name>
    <param-value></param-value>
  </context-param>

  <context-param>
    <description>
      State saving method: "client" or "server" (= default). See JSF Specification 2.5.3. Server
      performs better.
    </description>
    <param-name>javax.faces.STATE_SAVING_METHOD</param-name>
    <param-value>client</param-value>
  </context-param>

  <context-param>
    <description>
      Only applicable if state saving method is "server" (= default). Defines the amount (default =
      20) of the latest views are stored in session.
    </description>
    <param-name>org.apache.myfaces.NUMBER_OF_VIEWS_IN_SESSION</param-name>
    <param-value>20</param-value>
  </context-param>

  <context-param>
    <description>
      Only applicable if state saving method is "server". If true (default) the state will be
      serialized to a byte stream before it is written to the session. If false the state will not
      be serialized to a byte stream. Serializing negatively impacts perfomance.
    </description>
    <param-name>org.apache.myfaces.SERIALIZE_STATE_IN_SESSION</param-name>
    <param-value>false</param-value>
  </context-param>

  <context-param>
    <description>
      Only applicable if state saving method is "server" and if
      org.apache.myfaces.SERIALIZE_STATE_IN_SESSION is true. If true (default) the serialized state
      will be compressed before it is written to the session. If false the state will not be
      compressed.
    </description>
    <param-name>org.apache.myfaces.COMPRESS_STATE_IN_SESSION</param-name>
    <param-value>false</param-value>
  </context-param>

  <context-param>
    <description>
      This parameter tells MyFaces if javascript code should be allowed in the rendered HTML output.
      If javascript is allowed, command_link anchors will have javascript code that submits the
      corresponding form. If javascript is not allowed, the state saving info and nested parameters
      will be added as url parameters. Default: "true"
    </description>
    <param-name>org.apache.myfaces.ALLOW_JAVASCRIPT</param-name>
    <param-value>true</param-value>
  </context-param>

  <context-param>
    <param-name>org.apache.myfaces.DETECT_JAVASCRIPT</param-name>
    <param-value>false</param-value>
  </context-param>

  <context-param>
    <description>
      If true, rendered HTML code will be formatted, so that it is "human readable". i.e. additional
      line separators and whitespace will be written, that do not influence the HTML code. Default:
      "true"
    </description>
    <param-name>org.apache.myfaces.PRETTY_HTML</param-name>
    <param-value>true</param-value>
  </context-param>

  <context-param>
    <description>
      If true, a javascript function will be rendered that is able to restore the former vertical
      scroll on every request. Convenient feature if you have pages with long lists and you do not
      want the browser page to always jump to the top if you trigger a link or button action that
      stays on the same page. Default: "false"
    </description>
    <param-name>org.apache.myfaces.AUTO_SCROLL</param-name>
    <param-value>true</param-value>
  </context-param>

  <context-param>
    <description>
      Used for encrypting view state. Only relevant for client side state saving. See MyFaces
      wiki/web site documentation for instructions on how to configure an application for diffenent
      encryption strengths. see http://wiki.apache.org/myfaces/Secure_Your_Application
    </description>
    <param-name>org.apache.myfaces.secret</param-name>
    <param-value>NzY1NDMyMTA=</param-value>
  </context-param>

  <context-param>
    <description>
      Validate managed beans and navigation rules. See
      http://wiki.apache.org/myfaces/A_Little_Quality_Assurance
    </description>
    <param-name>org.apache.myfaces.validate</param-name>
    <param-value>true</param-value>
  </context-param>

  <!-- JSF Apache Tomahawk configuration (MyFaces extended components, w/ "t:" prefix)
    (see http://myfaces.apache.org/tomahawk/extensionsFilter.html) -->

  <filter>
    <filter-name>MyFacesExtensionsFilter</filter-name>
    <filter-class>org.apache.myfaces.webapp.filter.ExtensionsFilter</filter-class>
    <init-param>
      <param-name>maxFileSize</param-name>
      <param-value>20m</param-value>
      <!-- description>Set the size limit for uploaded files</description-->
    </init-param>
  </filter>

  <!-- extension mapping for adding <script/>, <link/>, and other resource tags to JSF-pages  -->
  <filter-mapping>
    <filter-name>MyFacesExtensionsFilter</filter-name>
    <!-- servlet-name must match the name of our javax.faces.webapp.FacesServlet entry -->
    <servlet-name>Faces Servlet</servlet-name>
    <dispatcher>REQUEST</dispatcher>
    <!-- Also invoke this filter when requests are forwarded -->
    <dispatcher>FORWARD</dispatcher>
  </filter-mapping>

  <!-- extension mapping for serving page-independent resources (javascript, stylesheets, images, etc.)  -->
  <filter-mapping>
    <filter-name>MyFacesExtensionsFilter</filter-name>
    <url-pattern>/faces/myFacesExtensionResource/*</url-pattern>
  </filter-mapping>
  
  <!-- Hibernate/Spring session management -->  

  <filter>
    <filter-name>ScreensaverSessionManagementFilter</filter-name>
    <filter-class>edu.harvard.med.screensaver.ui.util.ScreensaverSessionManagementFilter</filter-class>
    <init-param>
      <param-name>sessionFactoryBeanName</param-name>
      <param-value>hibernateSessionFactory</param-value>
    </init-param>
  </filter>

  <filter-mapping>
    <filter-name>ScreensaverSessionManagementFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>
  

  <!-- Tiles configuration -->

  <!-- Tiles ViewHandler config file.  The file specified here contains the application's various "tiles" definitions for each page. -->
  <context-param>
    <description>
      Tiles configuration definition files and a listener need to be defined. The listener will
      initialize JspTilesViewHandlerImpl with our tiles definitions.
    </description>
    <param-name>tiles-definitions</param-name>
    <param-value>/WEB-INF/tiles.xml</param-value>
  </context-param>


  <!-- JSP Configuration -->

  <jsp-config>
    <jsp-property-group>
      <display-name>screensaver</display-name>
      <url-pattern>*.jsp</url-pattern>
      <el-ignored>false</el-ignored>
      <scripting-invalid>false</scripting-invalid>
      <is-xml>false</is-xml>
      <!-- Can't use these w/MyEclipse JSP editor.
        See http://www.myeclipseide.com/PNphpBB2+file-viewtopic-t-9223.html 
        <include-prelude>/fragments/header.jspf</include-prelude>
        <include-coda>/fragments/footer.jspf</include-coda>
      -->
    </jsp-property-group>
  </jsp-config>


  <!-- Log4j setup -->

  <!-- This context-param provides explicit path to log4j properties file, but
    its very declaration also enables periodic refresh -->
  <context-param>
    <param-name>log4jConfigLocation</param-name>
    <param-value>classpath:log4j.properties</param-value>
  </context-param>

  <listener>
    <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
  </listener>
  

  <!-- JNDI setup -->
  
  <resource-env-ref>
    <description>Mutable capsule that allows us to store a LoginModuleFactory in JNDI, which is instantiated by our web app, and not available at Tomcat initialization time.</description>
    <resource-env-ref-name>bean/loginModuleFactoryCapsule</resource-env-ref-name>
    <resource-env-ref-type>edu.harvard.med.screensaver.ui.authentication.tomcat.LoginModuleFactoryCapsule</resource-env-ref-type>
  </resource-env-ref>


  <!-- Authentication/Security configuration -->

  <login-config>
    <auth-method>FORM</auth-method>
    <form-login-config>
      <form-login-page>/login.jsf</form-login-page>
      <form-error-page>/login-error.jsf</form-error-page>
    </form-login-config>
  </login-config>

  <security-constraint>
    <web-resource-collection>
      <web-resource-name>Precluded Methods</web-resource-name>
      <description>Disallow HTTP methods, application-wide</description>
      <url-pattern>/*</url-pattern>
      <http-method>DELETE</http-method>
      <http-method>HEAD</http-method>
      <http-method>PUT</http-method>
      <http-method>GET</http-method>
    </web-resource-collection>

    <auth-constraint />
  </security-constraint>

  <security-constraint>
    <display-name>Public</display-name>

    <web-resource-collection>
      <web-resource-name>Home</web-resource-name>
      <description>Allow unauthenticated user to request the home URL (i.e., the URL(s) in the welcome-file-list).</description>
      <url-pattern>/index.jsp</url-pattern>
      <http-method>GET</http-method>
    </web-resource-collection>
    
    <web-resource-collection>
      <web-resource-name>Resources</web-resource-name>
      <description>Images, stylesheets, etc.  Access via HTTP GET and HEAD methods only.</description>
      <url-pattern>/css/*</url-pattern>
      <url-pattern>/images/*</url-pattern>
      <!-- resources provided by Apache MyFaces and by Apache Tomahawk components -->
      <url-pattern>/faces/*</url-pattern>

      <http-method>GET</http-method>
      <http-method>HEAD</http-method>
    </web-resource-collection>
    
    <web-resource-collection>
      <web-resource-name>Error Messages</web-resource-name>
      <description>Pages that display error messages, which should displayable to everyone, including unauthenticated users.</description>
      <url-pattern>/reportException.jsf</url-pattern>
      <url-pattern>/unauthorizedAccess.jsp</url-pattern>
    </web-resource-collection>
    
    <!-- Having no auth-constraint element allows all roles, including users not authenticated -->

    <user-data-constraint>
      <transport-guarantee>NONE</transport-guarantee>
    </user-data-constraint>
  </security-constraint>

  <security-constraint>
    <web-resource-collection>
      <web-resource-name>unrestricted</web-resource-name>
      <url-pattern>/main.jsf</url-pattern>
      <url-pattern>/login.jsf</url-pattern>
      <url-pattern>/login-error.jsf</url-pattern>
      <url-pattern>/helpViewer.jsf</url-pattern>
      <url-pattern>/libraries/*</url-pattern>
      <url-pattern>/screens/*</url-pattern>
      <url-pattern>/screens/screenresults/*</url-pattern>
    </web-resource-collection>

    <auth-constraint>
      <role-name>screeningRoomUser</role-name>
      <role-name>readEverythingAdmin</role-name>
      <role-name>developer</role-name>
    </auth-constraint>

    <user-data-constraint>
      <transport-guarantee>NONE</transport-guarantee>
      <!--  TODO: transport-guarantee>CONFIDENTIAL</transport-guarantee -->
    </user-data-constraint>
  </security-constraint>

  <security-constraint>
    <web-resource-collection>
      <web-resource-name>librariesAdmin</web-resource-name>
      <url-pattern>/libraries/admin/*</url-pattern>
    </web-resource-collection>

    <auth-constraint>
      <role-name>librariesAdmin</role-name>  
    </auth-constraint>

    <user-data-constraint>
      <transport-guarantee>NONE</transport-guarantee>
      <!--  TODO: transport-guarantee>CONFIDENTIAL</transport-guarantee -->
    </user-data-constraint>
  </security-constraint>

  <security-constraint>
    <web-resource-collection>
      <web-resource-name>screenResultsAdmin</web-resource-name>
      <url-pattern>/screens/screenresults/admin/*</url-pattern>
    </web-resource-collection>

    <auth-constraint>
      <role-name>screenResultsAdmin</role-name>  
    </auth-constraint>

    <user-data-constraint>
      <transport-guarantee>NONE</transport-guarantee>
      <!--  TODO: transport-guarantee>CONFIDENTIAL</transport-guarantee -->
    </user-data-constraint>
  </security-constraint>

  <security-constraint>
    <web-resource-collection>
      <web-resource-name>developer</web-resource-name>
      <url-pattern>/dev/*</url-pattern>
    </web-resource-collection>

    <auth-constraint>
      <role-name>developer</role-name>
    </auth-constraint>
  </security-constraint>

</web-app>
