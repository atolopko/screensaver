# Log4J configuration, to be used during debugging

# By default, Screensaver log level is 'debug', while other 
# technology-specific log levels are set to 'info', by default, 
# with the intention that the developer will edit their local 
# copy of this file when they want more detail

### direct log messages to stdout ###
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target=System.out
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%d{ABSOLUTE} %5p %c:%L - %m%n

### direct messages to file ###
#log4j.appender.file=org.apache.log4j.FileAppender
#log4j.appender.file.File=screensaver.log
#log4j.appender.file.layout=org.apache.log4j.PatternLayout
#log4j.appender.file.layout.ConversionPattern=%d{ABSOLUTE} %5p %c{3}:%L - %m%n

### Root logger

log4j.rootLogger=info, stdout


### Screensaver application

log4j.logger.edu.harvard.med.screensaver=debug


### Tomcat

log4j.logger.org.apache.catalina.core=debug
log4j.logger.org.apache.catalina.session=debug
log4j.logger.org.apache.catalina.users=debug
log4j.logger.org.apache.coyote.tomcat=debug
log4j.logger.org.apache.jasper.compiler=error

log4j.logger.javax.servlet=debug


### Spring framework

log4j.logger.org.springframework=info


### JavaServer Faces

log4j.logger.org.apache.myfaces=info
log4j.logger.org.apache.myfaces.application=info

# following are suggestions from http://wiki.apache.org/myfaces/LoggingSettings

# Show lifecycle phases as they occur
log4j.logger.org.apache.myfaces.lifecycle.LifecycleImpl=trace
	
# Show servlet invocation
log4j.logger.org.apache.myfaces.webapp.MyFacesServlet=trace
log4j.logger.javax.faces.webapp.FacesServlet=trace
log4j.logger.org.apache.myfaces.tomahawk.application.jsp.JspTilesViewHandlerImpl=trace

	
# Show navigation processing
log4j.logger.org.apache.myfaces.application.NavigationHandlerImpl=trace
	
# Show modifications to Application
log4j.logger.org.apache.myfaces.application.ApplicationImpl=trace

# Show unresolved variables (note: an error will be shown when the bean is Spring-managed but available via Spring)
log4j.logger.org.apache.myfaces.el.VariableResolverImpl=debug
	
# Controls DebugUtils.traceView() output
# controls the verbose output of the rendered JSF component tree
#log4j.logger.org.apache.myfaces.util.DebugUtils=trace

# HTML rendering related issues (e.g, no content type). Good setting during development
log4j.logger.org.apache.myfaces.renderkit.html.HtmlResponseWriterImpl=debug
	

### Hibernate

log4j.logger.org.hibernate=info

# log HQL query parser activity
#log4j.logger.org.hibernate.hql.ast.AST=debug

# log just the SQL
#log4j.logger.org.hibernate.SQL=debug

### log JDBC bind parameters ###
log4j.logger.org.hibernate.type=info
#log4j.logger.org.hibernate.type=debug

### log schema export/update ###
log4j.logger.org.hibernate.tool.hbm2ddl=debug

# log HQL parse trees
#log4j.logger.org.hibernate.hql=debug

# log cache activity
#log4j.logger.org.hibernate.cache=debug

# log transaction activity
#log4j.logger.org.hibernate.transaction=debug
log4j.logger.org.hibernate.transaction=info

# log JDBC resource acquisition
#log4j.logger.org.hibernate.jdbc=debug

# enable the following line if you want to track down connection
# leakages when using DriverManagerConnectionProvider
#log4j.logger.org.hibernate.connection.DriverManagerConnectionProvider=trace
