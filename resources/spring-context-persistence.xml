<?xml version="1.0" encoding="UTF-8"?>

<!--
   $HeadURL$
   $Id$

   Copyright 2006 by the President and Fellows of Harvard College.

   Screensaver is an open-source project developed by the ICCB-L and NSRB labs
   at Harvard Medical School. This software is distributed under the terms of
   the GNU General Public License.
-->

<beans
  xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:aop="http://www.springframework.org/schema/aop"
  xmlns:tx="http://www.springframework.org/schema/tx"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
                      http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.0.xsd
                      http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd">

  <!-- Data sources -->

  <bean
    id="screensaverDataSource"
    class="org.apache.commons.dbcp.BasicDataSource">
    <description>
      DataSource used for running web application and utility programs
    </description>
    <property
      name="driverClassName"
      value="org.postgresql.Driver" />
    <property
      name="url"
      value="jdbc:postgresql://${SCREENSAVER_PGSQL_SERVER}/${SCREENSAVER_PGSQL_DB}" />
    <property
      name="username"
      value="${SCREENSAVER_PGSQL_USER}" />
    <property
      name="password"
      value="${SCREENSAVER_PGSQL_PASSWORD}" />
    <property
      name="minIdle"
      value="0" />
  </bean>

  <!--  Register EntityUpdater domain logic classes here.  See edu.harvard.med.screensaver.domainlogic package-info.html -->
  <!-- TODO: implement a mechanism to auto-detect and register all EntityUpdater classes, rather than having to explicitly register them here -->
  <bean id="entityUpdatersList" class="java.util.ArrayList">
    <constructor-arg>
      <list>
        <bean class="edu.harvard.med.screensaver.domainlogic.ScreenEntityUpdater">
          <constructor-arg ref="genericEntityDao"/>
          <constructor-arg ref="screenDao"/>
        </bean>
        <bean class="edu.harvard.med.screensaver.domainlogic.LibraryScreeningEntityUpdater">
          <constructor-arg ref="librariesDao"/>
        </bean>
      </list>
    </constructor-arg>
  </bean>


  <!-- Hibernate configuration -->


  <bean
    id="hibernateSessionFactory"
    class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
    <!-- Have Spring gather settings from the hibernate.cfg.xml file -->
    <property
      name="configLocation"
      value="classpath:hibernate.cfg.xml" />
    <!-- Specify the DataSource.  Overrides the datasource found in hibernate.cfg.xml.  -->
    <property
      name="dataSource"
      ref="screensaverDataSource" />
    <!-- Use a naming strategy that uses underscores in schema's field names -->
    <property name="namingStrategy">
      <bean
        id="org.hibernate.cfg.ImprovedNamingStrategy.INSTANCE"
        class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean" />
    </property>
    <!-- Release database connections after a transaction completes.  -->
    <property name="hibernateProperties">
      <props>
        <prop key="hibernate.connection.release_mode">
          after_transaction
        </prop>
        <prop key="hibernate.jdbc.batch_size">
          50
        </prop>
	   	<prop key="hibernate.jdbc.batch_versioned_data">true</prop>
    	<prop key="hibernate.order_inserts">true</prop>
    	<prop key="hibernate.order_updates">true</prop>
      </props>
    </property>
    <property name="eventListeners">
      <map>
        <entry key="post-load">
          <list>
            <bean class="edu.harvard.med.screensaver.db.accesspolicy.EntityViewPolicyInjectorPostLoadEventListener" />
            <bean class="edu.harvard.med.screensaver.domainlogic.EntityUpdatersInjector" />
          </list>
        </entry>
        <entry key="save-update">
          <list>
            <bean class="org.hibernate.event.def.DefaultSaveOrUpdateEventListener" />
            <bean class="edu.harvard.med.screensaver.domainlogic.EntityUpdatersInjector" />
          </list>
        </entry>
        <entry key="merge">
          <list>
            <bean class="org.hibernate.event.def.DefaultMergeEventListener" />
            <bean class="edu.harvard.med.screensaver.domainlogic.EntityUpdatersInjector" />
          </list>
        </entry>
      </map>
    </property>
  </bean>

  <!-- The bean through which our application will access Hibernate, and thus our persistent data.
    Inject this bean into our application's persistence-aware classes.  -->
  <bean
    id="hibernateTemplate"
    class="org.springframework.orm.hibernate3.HibernateTemplate">
    <property
      name="sessionFactory"
      ref="hibernateSessionFactory" />
    <property
      name="flushModeName"
      value="FLUSH_COMMIT" />
  </bean>


  <!-- Transactional support -->

  <!-- enable the configuration of transactional behavior based on annotations -->
  <!-- we (arbitrarily) use order="16" to allow other advice to be execute "outside" (before & after) transactional scope -->
  <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" order="16"/>

  <bean
    id="transactionManager"
    class="org.springframework.orm.hibernate3.HibernateTransactionManager">
    <property
      name="sessionFactory"
      ref="hibernateSessionFactory" />
    <property
      name="nestedTransactionAllowed"
      value="true" />
  </bean>

  <!-- end of transactional support configuration -->


  <bean
    id="schemaUtil"
    class="edu.harvard.med.screensaver.db.SchemaUtil">
    <property name="sessionFactoryBeanId">
      <idref bean="hibernateSessionFactory" />
    </property>
    <property
      name="hibernateTemplate"
      ref="hibernateTemplate" />
    <property
      name="usersDao"
      ref="usersDao" />
  </bean>


  <!-- Data Access Object (DAO) beans -->

  <bean
    id="genericEntityDao"
    class="edu.harvard.med.screensaver.db.GenericEntityDAOImpl">
    <property
      name="hibernateTemplate"
      ref="hibernateTemplate" />
  </bean>
  
  <bean
    id="usersDao"
    class="edu.harvard.med.screensaver.db.UsersDAO">
    <property
      name="hibernateTemplate"
      ref="hibernateTemplate" />
  </bean>

  <bean
    id="librariesDao"
    class="edu.harvard.med.screensaver.db.LibrariesDAOImpl">
    <constructor-arg ref="genericEntityDao" />
    <property
      name="hibernateTemplate"
      ref="hibernateTemplate" />
  </bean>

  <bean
    id="screenDao"
    class="edu.harvard.med.screensaver.db.ScreenDAOImpl">
    <constructor-arg ref="genericEntityDao" />
    <property
      name="hibernateTemplate"
      ref="hibernateTemplate" />
  </bean>

  <bean
    id="screenResultsDao"
    class="edu.harvard.med.screensaver.db.ScreenResultsDAOImpl">
    <property
      name="hibernateTemplate"
      ref="hibernateTemplate" />
  </bean>

  <bean
    id="cherryPickRequestDao"
    class="edu.harvard.med.screensaver.db.CherryPickRequestDAO">
    <constructor-arg ref="genericEntityDao" />
    <property
      name="hibernateTemplate"
      ref="hibernateTemplate" />
  </bean>

</beans>
