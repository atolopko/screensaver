<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">
<beans>

  <!-- Data sources -->

  <!-- Will be modified by our dataSourceConfigurer (PropertyPlaceholderConfigurer) bean, to replace the ${...} variable references with real values from a properties file. -->
  <bean
    id="screensaverDataSource"
    class="org.apache.commons.dbcp.BasicDataSource">
    <description>DataSource used for running web application and utility programs</description>
    <property name="driverClassName" value="org.postgresql.Driver"/>
    <property name="url" value="jdbc:postgresql://${host}/${database}"/>
    <property name="username" value="${user}"/>
  </bean>
  
  <bean
    id="dataSourceConfigurer"
    class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    <property name="location" value="classpath:datasource.properties"/>
    <!-- Specify default properties, used if running from the Eclipse environment (can override these by defining Java system properties) -->
    <property name="properties">
      <props>
        <prop key="host">localhost</prop>
        <prop key="database">testscreensaver1</prop>
        <prop key="user">testscreensaver1</prop>
      </props>
    </property>
  </bean>


  <!-- Hibernate configuration -->

  <bean
    id="hibernateSessionFactory"
    class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
    <!-- Have Spring gather settings from the hibernate.cfg.xml file, which we are auto-generating -->
    <property
      name="configLocation"
      value="classpath:hibernate.cfg.xml" />
    <!-- Specify the DataSource.  Overrides the datasource found in
    hibernate.cfg.xml.  -->
    <property
      name="dataSource"
      ref="screensaverDataSource" />
    <!-- Use a naming strategy that uses underscores in schema's field names -->
    <property name="namingStrategy">
      <bean
        id="org.hibernate.cfg.ImprovedNamingStrategy.INSTANCE"
        class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean" />
    </property>
  </bean>

  <!-- The bean through which our application will access Hibernate, and thus our persistent data.
    Inject this bean into our application's persistence-aware classes.  -->
  <bean
    id="hibernateTemplate"
    class="org.springframework.orm.hibernate3.HibernateTemplate">
    <property
      name="sessionFactory"
      ref="hibernateSessionFactory" />
    <!-- property name="flushModeName" value="FLUSH_COMMIT" /-->
  </bean>
  

  <!-- Transactional support -->

  <!-- Configuration for explicity, declarative transactions in Spring (uses AOP), 
  where every bean needing transactional capabilities explicitly has a proxy defined for it -->
  <!-- Common practice is to specify a parent TransactionProxyFactoryBean, with default config, and set child beans' "parent" attribute to this parent bean. -->
  <!-- (Can also use the more AOP-generic and more flexible, but more verbose, approach of specifying ProxyFactoryBean and a TransactionInterceptor beans -->

  <bean
    id="txnManager"
    class="org.springframework.orm.hibernate3.HibernateTransactionManager">
    <property
      name="sessionFactory"
      ref="hibernateSessionFactory" />
  </bean>

  <!-- The beans that are to be wrapped by transactional proxies -->

  <bean
    id="dao"
    class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
    <property
      name="transactionManager"
      ref="txnManager" />
    <!-- The class/interface to be imbued with transactional qualities -->
    <property
      name="target"
      ref="daoImpl" />
    <!-- Use JDK5 annotation-based transaction declarations -->
    <property name="transactionAttributeSource">
      <bean class="org.springframework.transaction.annotation.AnnotationTransactionAttributeSource" />
    </property>
    <!-- Note: can also specify preInterceptors and postInterceptors properties for
      specifying other AOP advice -->
  </bean>
  
  <!-- The following (alternate) configuration allows for auto-proxying beans whose source code contains 
  JDK 1.5 @Transactional annotation. It enables automatic detection of Spring's @Transactional 
  annotation, leading to implicit proxies for beans containing that annotation. 
  [See Spring 1.2.x reference docs, section 6.10.2., "Using metadata-driven auto-proxying"] 

  <!- - Creates AOP proxies based on all candidate Advisors in the current Spring context.   
  Allows us to apply the same advice consistently to many business objects. - ->
  <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"/>

  <bean class="org.springframework.transaction.interceptor.TransactionAttributeSourceAdvisor">
    <property
      name="transactionInterceptor"
      ref="transactionInterceptor" />
  </bean>
  
  <bean
    id="transactionInterceptor"
    class="org.springframework.transaction.interceptor.TransactionInterceptor">
    <property
      name="transactionManager"
      ref="txnManager" />
    <property name="transactionAttributeSource">
      <bean class="org.springframework.transaction.annotation.AnnotationTransactionAttributeSource" />
    </property>
  </bean>
  
  -->
  
  <!-- end of transactional support configuration -->
  
  
  <bean
    id="schemaUtil"
    class="edu.harvard.med.screensaver.db.SchemaUtil">
    <property name="sessionFactoryBeanId">
      <idref bean="hibernateSessionFactory"/>
    </property>
  </bean>


  <!-- Data Access Object (DAO) beans -->

  <bean
    id="daoImpl"
    class="edu.harvard.med.screensaver.db.DAOImpl"
  >
    <property
      name="hibernateTemplate"
      ref="hibernateTemplate"
    />
  </bean>
  
</beans>
