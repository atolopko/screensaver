<?xml version="1.0" encoding="UTF-8"?>
<!--
  $HeadURL$
  $Id$

  Copyright 2006 by the President and Fellows of Harvard College.

  Screensaver is an open-source project developed by the ICCB-L and NSRB labs
  at Harvard Medical School. This software is distributed under the terms of
  the GNU General Public License.
-->

<project
  name="Screensaver"
  default="deploy"
  basedir="."
>
  <description>
    A build.xml for Screensaver 1.xx
  </description>

  <!-- properties -->

  <property 
   name="debug"
   description="controls whether tasks should be 'debug-aware'; provides a short-hand command-line option for setting all *.debug options appropriately"
   value="false"/>
  <property
    name="javac.debug"
    description="controls whether Java compilation generates debug information in class files"
    value="${debug}"/>
  <property
    name="javac.optimize"
    value="true" 
    description="controls whether Java compilation generates debug information in class files"/>
  <condition 
    property="javac.optimize" 
    value="true"
    else="false" >
    <isfalse value="${debug}"/> 
  </condition> 
  <property name="verbose" value="false" description="controls verbosity of various Ant tasks"/> 
  <property name="war" value="build/screensaver.war"/>
  <property name="deploy.dir" value="/usr/local/jakarta-tomcat/webapps/screensaver"/>
  <property name="war.build.dir" location="build/war"/>
  <property name="src.dir" location="src"/>
  <property name="test.src.dir" location="test"/>
  <property name="hibernate.cfg.xml" location="resources/hibernate.cfg.xml"/>
  <property name="javadoc.dir" location="build/api"/>
 
  <!-- file sets -->

  <fileset
    id="lib.used.fileset"
    dir="lib" 
  >
    <include name="**/*.jar"/>
    <exclude name="**/unused/**"/>
  </fileset>
 
  <fileset
    id="model.src.fileset"
    description="defines the Java source files comprising the application's domain model" 
    dir="${src.dir}"
    casesensitive="yes"
  >
    <include name="edu/harvard/med/screensaver/model/**/*.java"/>
  </fileset>
  
  <fileset 
    id="test.model.src.fileset"
    description="defines the Java source files comprising a domain model for testing purposes; 'test' property must be set"
    dir="${test.src.dir}"
    casesensitive="yes"
  >
    <include 
      if="test"
      name="edu/harvard/med/screensaver/model/Child.java"/>
    <include
      if="test"
      name="edu/harvard/med/screensaver/model/Parent.java"/>
  </fileset>
 
  <fileset
    id="junit.tests.fileset"
    description="defines the Java source files that are JUnit tests" 
    dir="${test.src.dir}"
    casesensitive="yes"
  >
    <include name="edu/harvard/med/screensaver/**/*Test.java"/>
    <exclude name="edu/harvard/med/screensaver/**/Abstract*.java"/>
    <exclude name="edu/harvard/med/screensaver/**/*Suite.java"/>
  </fileset>
 
  <!-- uptodate properties (depends on "file sets" section) -->
 
  <uptodate property="hbm_xml.uptodate" targetfile="${hibernate.cfg.xml}" >
    <srcfiles refid="model.src.fileset"/>
    <srcfiles refid="test.model.src.fileset"/>
  </uptodate> 

  
  <!-- classpaths --> 

  <path id="project.sourcepath" path="${src.dir}"/>

  <path id="project.test.sourcepath" path="${test.src.dir}"/>

  <path id="project.library.path">
    <fileset refid="lib.used.fileset"/>
  </path>

  <path id="project.classpath">
    <path refid="project.library.path"/>
    <pathelement path="resources"/>
    <pathelement path="build/war/WEB-INF/classes"/>
  </path>


  <!-- build and deploy -->

  <target name="deploy">
    <description>
      Deploy Screensaver to the application server
    </description>
    <delete dir="${deploy.dir}"/>
    <antcall target="exploded.war">
      <param name="exploded.war.dir" location="${deploy.dir}"/>
    </antcall>
  </target>

  <target name="war">
    <description>
      Build Screensaver into a Web ARchive file
    </description>
    <antcall target="exploded.war">
      <param name="exploded.war.dir" location="${war.build.dir}"/>
    </antcall>
    <jar
      destfile="${war}"
      basedir="${war.build.dir}"
    />
  </target>

  <target
    name="exploded.war"
    depends="hbm_xml"
  >
    <description>
      Generate exploded Web ARchive directory structure for the Screensaver web application.
      Used to 1) create a WAR file, and 2) deploy exploded WAR file to application server.
    </description>
    <property name="webinf.dir" value="${exploded.war.dir}/WEB-INF"/>
    <property name="metainf.dir" value="${exploded.war.dir}/META-INF"/>
    <property name="classes.dir" value="${webinf.dir}/classes"/>

    <mkdir dir="${classes.dir}"/>
  
    <!-- note: javac task clears out ${classes.dir}, so any files we copy there should be done afterwards -->
    <javac 
      srcdir="${src.dir}"
      destdir="${classes.dir}"
      classpathref="project.library.path"
      debug="${javac.debug}" 
      optimize="${javac.optimize}"
      listfiles="${verbose}" 
    />
  
    <!-- TODO: run this conditionally on the test var
    <javac 
      srcdir="${test.src.dir}"
      destdir="${classes.dir}"
      classpathref="project.classpath"
      debug="${javac.debug}" 
      optimize="${javac.optimize}"
      listfiles="${verbose}" 
    />
    -->
  
    <copy 
      file="web/manifest.mf" 
      tofile="${metainf.dir}/MANIFEST.MF" 
      verbose="${verbose}"/>

    <!-- if we were to copy jsp files below WEB-INF we have to map each of them in our web.xml file, 
    to allow them to be accessed -->
    <copy 
      todir="${exploded.war.dir}" 
      verbose="${verbose}"
    >
      <fileset dir="jsp" includes="**/*"/>
    </copy>
  
    <copy 
      todir="${webinf.dir}" 
      verbose="${verbose}"
    >
      <!-- we have to copy taglibs directly into the WEB-INF directory, if we want to avoid having
      to provide an explicit mapping for each .tld file in our web.xml <jsp-config> element -->  
      <fileset dir="web/taglib"/>
      <fileset dir="web">
        <include name="web.xml" />
        <include name="faces-config.xml"/> 
       </fileset> 
    </copy>
  
    <!-- deploy log4j.debug.properties as log4j.properties; will be overwritten by normal log4.properties unless 'debug' property is set -->
    <copy
      file="resources/log4j.debug.properties"
      tofile="${classes.dir}/log4j.properties"
      verbose="${verbose}"/>
      
    <copy 
      todir="${classes.dir}" 
      verbose="${verbose}"
    >
      <fileset dir="resources">
        <include name="**/*"/>
        
        <exclude name="log4j.debug.properties"/>
        <excludesfile name="log4j.properties" if="${debug}"/>
      </fileset>    
    </copy>
  
    <copy
      todir="${webinf.dir}/lib"
      flatten="true"
      verbose="${verbose}"      
    >
      <fileset refid="lib.used.fileset"/>
    </copy>
  
  </target>

  <target 
    name="hbm_xml"
    unless="hbm_xml.uptodate"
  >
    <description>
      Generate hibernate.cfg.xml and .hbm.xml files
    </description>
    <taskdef
      name="hibernatedoclet"
      classname="xdoclet.modules.hibernate.HibernateDocletTask"
      classpathref="project.library.path"
    />
    <hibernatedoclet
      destdir="resources"
      excludedtags="@version,@author,@todo"
      verbose="${verbose}"
    >
      <fileset refid="model.src.fileset"/>
      <fileset refid="test.model.src.fileset"/>
      <hibernatecfg
        version="3.0" 
        showsql="true"
        driver="org.postgresql.Driver"
        jdbcurl="jdbc:postgresql://localhost/screensaver"
        username="screensaver"
        password="screensaver"
        dialect="org.hibernate.dialect.PostgreSQLDialect"
      />
      <!-- TODO: make 'hibernate.cfg.xml' property match this destinationFile attribute value -->   
      <hibernate version="3.0" destinationFile="{0}.hbm.xml"/>
    </hibernatedoclet>
  </target>


  <!-- generate ddl -->

  <target name="ddl" depends="hbm_xml">
    <description>
      Generate the DDL from the beans classes and associated hbm.xml files
    </description>
    <taskdef
      name="hibernatetool" 
      classname="org.hibernate.tool.ant.HibernateToolTask" 
      classpathref="project.classpath"
    />
    <hibernatetool destdir="sql">
      <configuration
        configurationfile="resources/hibernate.cfg.xml"
        namingstrategy="org.hibernate.cfg.ImprovedNamingStrategy"
      />
      <hbm2ddl
        export="false"
        format="true"
        outputfilename="create_schema.sql"
      />
      <hbm2ddl
        create="false"
        drop="true"
        export="false"
        format="true"
        outputfilename="drop_schema.sql"
      />
    </hibernatetool>
  </target>
 
  <!-- generate javadoc --> 
 
  <target name="javadoc">
    <javadoc 
     doctitle="Screensaver 1.00" 
     sourcepathref="project.sourcepath"
     classpathref="project.library.path"
     packagenames="edu.harvard.med.screensaver.*" 
     destdir="${javadoc.dir}" 
     access="package" 
     author="true"
     nodeprecated="false"
     nodeprecatedlist="false" 
     noindex="false" 
     nonavbar="false" 
     notree="false"
     splitindex="true" 
     use="true" 
     version="true"
     verbose="${verbose}" 
    />
  </target>
 
 
  <!-- run tests -->
 
  <target 
    name="test"
    description="Runs all JUnit tests, after performing a clean build" 
    depends="clean">
    <property name="test" value="true"/>
    <antcall target="war"/>
    <taskdef
      name="junit"
      classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask"
      classpathref="project.library.path"
    />

    <junit
      printsummary="true"
      showoutput="true" 
      description="Run all project's tests"
    >
      <test name="edu.harvard.med.screensaver.PackageTestSuite" outfile="test-result"></test> 
      <!--classpath refid="project.classpath"/-->
      <!--batchtest todir="${basedir}/.test.reports">
        <fileset refid="junit.tests.fileset"/>
      </batchtest-->
    </junit> 
  </target> 
 
 
  <!-- cleanup routines -->

  <target
    name="clean-persistence" 
    description="Clean out generated files related to persistence (Hibernate files, sql schema)."
  >
    <delete includeemptydirs="true">
      <fileset file="${hibernate.cfg.xml}"/>
      <fileset dir="resources" includes="**/*.hbm.xml" />
      <fileset dir="sql" includes="create_schema.sql" />
      <fileset dir="sql" includes="drop_schema.sql" />
      <fileset dir="${javadoc.dir}" includes="**/*"/>   
    </delete>
  </target>

  <target
    name="clean-war"
    description="Clean .war file, and directory structure used to build the .war file"
  >
    <delete
     includeemptydirs="true"
     failonerror="false"
    >
      <fileset dir="build/war"/>
      <fileset file="${war}"/>
    </delete>
  </target>

  <target 
    name="clean" 
    description="Clean out generated files." 
    depends="clean-persistence,clean-war"
  >
    <delete includeemptydirs="true">
      <fileset dir="resources" includes="edu/**" />
    </delete>
  </target>

</project>
